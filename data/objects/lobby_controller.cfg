{
	id: "lobby_controller",
	is_human: true,
	hitpoints: 20,
	editor_info: { category: "player" },
    hidden_in_level: true,
    use_absolute_screen_coordinates: true,
	is_strict: true,

    vars: {
		client: null,
		font: 'RobotoCondensed-Regular',
		font_color: 'antique_white',
    },
    tmp: {
		username: null,
		password: "Hello there",
		salt: null,
		session_id: -1,
		signed_on: false,
		game_selection: "",
		games: {},
		bots_added: 0,
		game_id: -1,
		lobby_users: [],
    },

    properties: {
		error_text: "def(txt) set(me.widgets.error_text.text, txt)",
		
        do_sign_on: "def(uname) if(vars.client, 
			[tbs_send(vars.client, {
				type: 'lobby_login', 
				user: uname, 
				session_id: tmp.session_id} + if(tmp.salt and tmp.password, {password:sha1(salt+tmp.password)})),
				error_text(null)], 
			error_text('No TBS client configured')
        )",
		
		send_password: "def(salt,pwd,sid) tbs_send(vars.client, {type:'lobby_login', user:tmp.username, password:sha1(salt+pwd), session_id:sid})",
		
		get_lobby_status: "def(sid) tbs_send(vars.client, {type:'lobby_get_status', user:tmp.username, session_id:sid})",
		
		do_sign_off: "if(vars.client, 
			tbs_send(vars.client, {type:'lobby_quit', user:tmp.username, session_id:tmp.session_id}), 
			error_text('No TBS client configured')
		)",
		
		get_server_info: "def(sid) if(vars.client, tbs_send(vars.client, {type:'lobby_get_server_info', user:tmp.username, session_id:sid}), error_text('No TBS client configured'))",
		
		do_start_game: "[
			if(vars.client, 
				tbs_send(vars.client, {
					type:'lobby_start_game', 
					user:tmp.username, 
					session_id:tmp.session_id, 
					game_type:tmp.game_selection, 
					players:[{user:tmp.username, session_id:tmp.session_id}], 
					bots:tmp.bots_added}), 
				error_text('No TBS client configured')
			)
		]",
		
		create_lobby_dialog: "def(ww, hh) set_widgets(me, {		
			type: 'dialog',
			id: 'dlg',
			background_frame: 'empty_window',
			rect: [0, 0, ww, hh],
			cursor: [35, 20],
			children: [{
				type: 'grid',
				columns: 2,
				horizontal_padding: 40,
				children: [{
					type: 'text_editor', 
					id: 'username_edit_box',
					font_size: 12, 
					width: 200, 
					height: 30,
					text: USERNAME or '',
					//on_change: 'set(tmp.username, me.widgets.username_edit_box.text)',
				}, {
					type: 'button', 
					id: 'sign_on_button',
					label: {type: 'label', text: 'Sign On', size: 16, color: vars.font_color, font: vars.font},
					on_click: 'if(tmp.signed_on, [
							do_sign_off, 
							set(me.widgets.sign_on_button.disable, true),
						], [
							do_sign_on(me.widgets.username_edit_box.text), 
							set(me.widgets.sign_on_button.disable, true),
							set(tmp.username, me.widgets.username_edit_box.text)
						]
					)',
				}],
			}, {
				type: 'grid',
				id: 'user_list_grid',
				columns: 1,
				column_widths: ww/3,
				allow_selection: true,
				max_height: hh-150,
				wh:[ww/3, hh-150],
				show_background: true,
				children: [
				]
			}, {
				type: 'label',
				size: 36,
				id: 'error_text',
				color: 'red',
				font: vars.font,
				text: '',
			}],
		})",
		
		create_lobby_list: "def(users, ww, hh) 
			set(me.widgets.user_list_grid.children, map(users, {
				type: 'grid',
				column_widths: ww/6,
				columns: 2,
				children: [{
					type: 'label',
					font: vars.font,
					size: 12,
					color: vars.font_color,
					text: value.user,					
				}, {
					type: 'grid',
					columns: 2,
					children: [{
						type: 'label',
						font: vars.font,
						size: 12,
						color: vars.font_color,
						text: value.game,
					}, {
						type: 'label',
						font: vars.font,
						size: 12,
						color: vars.font_color,
						text: value.created_game,					
					}] + [if(value.game != 'lobby', {
						type: 'button', label:'Observe', on_click: 'debug(q(observe clicked))'
					}, {
						type: 'label', text:''
					})] + [if(value.created_game and value.waiting_for_players, {
						type: 'button', label:'Join', on_click: 'debug(q(join clicked))'
					}, {
						type: 'label', text:''
					})]
				}]
			}))
		",
		
		change_selection: "def(sel) [
			set(tmp.bots_added, 0),
			set(tmp.game_selection, sel),
			set(me.widgets.minp.text, 'Minimum Players: ' + tmp.games.sel.min_players),
			set(me.widgets.minp.text, 'Minimum Humans: ' + tmp.games.sel.min_humans),
			set(me.widgets.minp.text, 'Maximum Players: ' + tmp.games.sel.max_players),
			set(me.widgets.minp.text, 'Bots supported: ' + tmp.games.sel.has_bots),
		]",
		
		do_create_lobby_game: "def(game_type) 
			if(game_type, 
				tbs_send(vars.client, {type: 'lobby_create_game', user: tmp.username, session_id: tmp.session_id, game_type: game_type}),
				error_text('ERROR: game name is empty')
			)
		",
		
		build_games_selector: "def(games_map, game, ww, hh) {
			type: 'dialog',
			id: 'game_selector',
			zorder: 1000, 
			rect: [ww/2, 25, ww/2-25, hh-50],
			background_frame: 'empty_window',
			cursor: [20, 20],
			children: [
				{
					type: 'grid',
					columns: 1,
					column_widths: ww/2-65,
					column_alignments: 'center',
					children: [
						{type: 'selector', id: 'sel', list: map(games_map, value.display), on_change: 'change_selection(selection)'},
						{type: 'label', id: 'minp' ,text: 'Minimum Players: ' + game.min_players, font: vars.font, size: 14, color: vars.font_color}, 
						{type: 'label', id: 'minh', text: 'Minimum Humans: ' + game.min_humans, font: vars.font, size: 14, color: vars.font_color}, 
						{type: 'label', id: 'maxp', text: 'Maximum Players: ' + game.max_players, font: vars.font, size: 14, color: vars.font_color}, 
						{type: 'label', id: 'hasbots', text: 'Bots supported: ' + game.has_bots, font: vars.font, size: 14, color: vars.font_color}, 
						{type: 'button', id: 'create_game', label: {type: 'label', text: 'Create Game', font: vars.font, size: 20, color: vars.font_color}, on_click: [do_create_lobby_game(game.name), set(me.widgets.create_game.disable, true)]},
				// XXX add Create/Start/Add bots puttons
					],
				},
			],
		}",
		
		create_games_selector: "def(games_map, game_key, ww, hh) if(me.widgets.game_selector, 
			set(me.widgets.game_selector, build_games_selector(games_map, games_map[game_key], ww, hh)), 
			set(me.widgets.child, build_games_selector(games_map, games_map[game_key], ww, hh))
		)",
    },
    
    on_create: "[
		create_lobby_dialog(SCREEN_WIDTH, SCREEN_HEIGHT),
        set(vars.client, tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT)),
    ]",
	on_window_resize: "[
		create_lobby_dialog(width, height),
		if(size(tmp.lobby_users) > 0, create_lobby_list(tmp.lobby_users, width, height)),
	]",
	
	on_process: "if(vars.client, tbs_process(vars.client))",
    
    on_connection_error: "error_text(error)",
    
	on_connection_success: "error_text(null)",
	
	on_message_received: "[//debug(message.type, message),
		switch(message.type, 
			'lobby_password_request', send_password(message.salt, tmp.password, message.session_id),
			'lobby_login_success', [
				set(tmp.session_id, message.session_id), 
				set(tmp.signed_on, true), 
				set(widgets.sign_on_button.label.text, 'Sign Off'),
				set(widgets.sign_on_button.enable, true),
				get_server_info(message.session_id),
			],
			'error', error_text(message.description),
			'lobby_status', [set(tmp.lobby_users, message.clients), create_lobby_list(message.clients, SCREEN_WIDTH, SCREEN_HEIGHT)],
			'lobby_server_info', [
				if(message.servers, [
					create_games_selector(message.servers, game_key, SCREEN_WIDTH, SCREEN_HEIGHT),
					set(tmp.games, message.servers),
					set(tmp.game_selection, game_key)
				] where game_key = keys(message.servers)[0]), 
				get_lobby_status(tmp.session_id)
			],
			'lobby_bye', [
				set(tmp.signed_on, false), 
				set(widgets.sign_on_button.label.text, 'Sign On'),
				set(me.widgets.sign_on_button.enable, true),
				set(tmp.session_id, -1),
				set(widgets.user_list_grid.children, []),
				if(me.widgets.game_selector, set(me.widgets.game_selector, null)),
			],
			'lobby_game_created', debug('lobby game created okay'),
			'game_created', [
				set(tmp.game_id, message.game_id),
				module_launch(tmp.game_selection, {game_id:message.game_id, user:tmp.username, session_id:tmp.session_id, from_lobby:true} + tmp.games[game_selection]),
			],
		)
    ]",

	animation: {
		id: "stand",
		image: "cube.png",
		rect: [0,0,15,15]
	},
}
