{
	id: "lobby_controller",
	is_human: true,
	hitpoints: 20,
	editor_info: { category: "player" },
    hidden_in_level: true,
    use_absolute_screen_coordinates: true,

    vars: {
		client: null,
    },
    tmp: {
        username: "@eval USERNAME",
		password: "Hello there",
		salt: null,
		session_id: -1,
		signed_on: false,
		game_selection: "",
		games: {},
		bots_added: 0,
		game_id: -1,
    },

    properties: {
		error_text: "def(txt) set(me.widgets.error_text.text, txt)",
		create_games_selector: "def(games_map) [
			set(me.widgets.child, {type:'selector', id:'sel', align_h:'center', x:4*SCREEN_WIDTH/6, y:50, list:map(games_map, value.display), on_change:'level.player.change_selection(selection)'}), 
			set(me.widgets.child, {type:'label', id:'minp', align_h:'center', x:4*SCREEN_WIDTH/6, y:200, text:'Minimum Players: ' + games_map[first_key].min_players}), 
			set(me.widgets.child, {type:'label', id:'minh', align_h:'center', x:4*SCREEN_WIDTH/6, y:220, text:'Minimum Humans: ' + games_map[first_key].min_humans}), 
			set(me.widgets.child, {type:'label', id:'maxp', align_h:'center', x:4*SCREEN_WIDTH/6, y:240, text:'Maximum Players: ' + games_map[first_key].max_players}), 
			set(me.widgets.child, {type:'label', id:'hasbots', align_h:'center', x:4*SCREEN_WIDTH/6, y:260, text:'Bots supported: ' + games_map[first_key].has_bots}), 
			set(tmp.games, games_map),
			set(tmp.game_selection, first_key),
		] where first_key = keys(games_map)[0]",
		change_selection: "def(sel) [
			set(tmp.bots_added, 0),
			set(tmp.game_selection, sel),
			set(me.widgets.minp.text, 'Minimum Players: ' + tmp.games.sel.min_players),
			set(me.widgets.minp.text, 'Minimum Humans: ' + tmp.games.sel.min_humans),
			set(me.widgets.minp.text, 'Maximum Players: ' + tmp.games.sel.max_players),
			set(me.widgets.minp.text, 'Bots supported: ' + tmp.games.sel.has_bots),
		]",
		////  map(message.servers, debug(value.display_name, value.min_players, value.max_players, value.has_bots))
        send_username: "[
            tbs_send(client, {type:'login', user:tmp.username, session_id:tmp.session_id} + if(tmp.salt and tmp.password, {password:sha1(salt+tmp.password)})),
			error_text(null)
        ]",
		send_password: "def(salt,pwd,sid) tbs_send(client, {type:'login', user:tmp.username, password:sha1(salt+pwd), session_id:sid})",
		get_lobby_status: "def(sid) tbs_send(client, {type:'get_status', user:tmp.username, session_id:sid})",
		do_sign_off: "if(vars.client, tbs_send(vars.client, {type:'quit', user:tmp.username, session_id:tmp.session_id}), error_text('No TBS client configured'))",
		get_server_info: "def(sid) if(vars.client, tbs_send(vars.client, {type:'get_server_info', user:tmp.username, session_id:sid}), error_text('No TBS client configured'))",
		
		do_start_game: "[
			if(vars.client, 
				tbs_send(vars.client, {
					type:'start_game', 
					user:tmp.username, 
					session_id:tmp.session_id, 
					game_type:tmp.game_selection, 
					players:[{user:tmp.username, session_id:tmp.session_id}], 
					bots:tmp.bots_added}), 
				error_text('No TBS client configured')
			)
		]",
    },
    
    consts: {		
        lobby_dialog: {
            type: "dialog",
			id: "dlg",
            background_frame: "empty_window",
            rect: [0, 0, "@eval SCREEN_WIDTH", "@eval SCREEN_HEIGHT"],
            cursor: [35, 20],
            children: [
                {
                    type: "grid",
                    columns: 3,
                    horizontal_padding: 40,
                    children: [
                        { 
                            type: "text_editor", 
                            font_size: 12, 
                            width: 200, 
                            height: 30,
							text: "@eval if(USERNAME, USERNAME, '')",
                            on_change: "set(tmp.username, text)",
                        },
                        { 
                            type: "button", 
                            label: "Sign on", 
							id: "sign_on_button",
                            on_click: "if(tmp.signed_on, 
								// Signed on so log off
								do_sign_off, 
								// Signed off so log on
								if(tmp.username, send_username, set(level.player.widgets.error_text.text, 'No username supplied')))", 
                            
                        },
                        {
                            type: "label",
                            font_size: 16,
                            color: "red",
                            text: "",
                            id: "error_text",
                        },
                    ],
                },
                {
                    type: "grid",
					id: "user_list_grid",
                    columns: 1,
                    column_widths: ["@eval SCREEN_WIDTH/3"],
                    allow_selection: true,
                    max_height: "@eval SCREEN_HEIGHT - 120",
                    wh:["@eval SCREEN_WIDTH/3", "@eval SCREEN_HEIGHT - 120"],
                    show_background: true,
                    //on_select: "debug('grid row selected: ', selection)",
                },
                {
                    type: "grid",
                    columns: 3,
                    horizontal_padding: 40,
                    children: [
                        {
                            type: "button",
                            label: "Create Game",
                            //visible: false,
                            on_click: "debug('Create Game clicked')",
                        },
                        {
                            type: "button",
                            label: "Play Now!",
                            //visible: false,
                            on_click: "level.player.do_start_game",
                        },
                        {
                            type: "button",
                            label: "Add Bot",
                            //visible: false,
                            on_click: "debug('Add Bot clicked')",
                        },
                    ]
                },
            ],            
        },
    },
   
    on_create: "[
		set_widgets(self, consts.lobby_dialog),
        set(vars.client, tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT)),
    ]",
	
	on_process: "if(vars.client, tbs_process(vars.client))",
    
    on_connection_error: "[debug('connection error', error), error_text(error)]",
    
	on_connection_success: "error_text(null)",
	
	on_message_received: "[//debug(message.type, message),
		switch(message.type, 
			'password_request', send_password(message.salt, tmp.password, message.session_id),
			'login_success', [
				set(tmp.session_id, message.session_id), 
				set(tmp.signed_on, true), 
				set(widgets.sign_on_button.label.text, 'Sign Off'),
				get_server_info(message.session_id),
			],
			'error', error_text(message.description),
			'status', map(message.lobby_users, set(widgets.user_list_grid.child, 
				{type:'grid', column_widths: [SCREEN_WIDTH/6], columns:2, children:[{type:'label', text:value.user}, {type:'label', text:value.game}]}
			)),
			'server_info', [if(message.servers, create_games_selector(message.servers)), get_lobby_status(tmp.session_id)],
			'bye', [
				set(tmp.signed_on, false), 
				set(widgets.sign_on_button.label.text, 'Sign On'),
				set(tmp.session_id, -1),
				set(widgets.user_list_grid.children, []),
			],
			'game_created', [
				set(tmp.game_id, message.game_id),
				module_launch(tmp.game_selection, {game_id:message.game_id, user:tmp.user, session_id:tmp.session_id, from_lobby:true} + tmp.games[game_selection]),
			],
		)
    ]",

	animation: [
		{
		id: "stand",
		image: "cube.png",
		rect: [0,0,15,15]
		}
	],
}
