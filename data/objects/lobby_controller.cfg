{
	id: "lobby_controller",
	is_human: true,
	is_strict: true,
    hidden_in_level: true,
	always_active: true,
	hidden_in_game: true,
	zorder: 50,

    vars: {
		client: null,
		font: 'RobotoCondensed-Regular',
		color: 'antique_white',
    },
	
    tmp: {
		username: USERNAME,
		session_id: -1,
		salt: null,
		password: 'Hello there',
		signed_on: false,
		
		servers: null,
		game_selection: null,
		lobby_users: [],
    },

    properties: {
		// Helper stuff.
		level_width: "level.dimensions[2]",
		level_height: "level.dimensions[3]",
		error_text: "def(txt) if(me.widgets.error_text, [set(me.widgets.error_text.text, txt), set(me.widgets.error_text.color, 'red')])",
		info_text:  "def(txt) if(me.widgets.error_text, [set(me.widgets.error_text.text, txt), set(me.widgets.error_text.color, 'green')])",
		checked_tbs_send: "def(callable) if(vars.client, tbs_send(vars.client, callable), error_text('No TBS client configured'))",
		enable_frames: "def(en=true) map(me.widgets.children, set(value.enable, en))",
		
		// Messages sent to lobby server
		get_server_info: "checked_tbs_send({type:'lobby_get_server_info'})",
		get_lobby_users: "checked_tbs_send({type:'lobby_get_users'})",
		do_sign_on: "checked_tbs_send({
			type:'lobby_login', 
			user:tmp.username, 
			session_id:tmp.session_id
		} + if(tmp.salt and tmp.password, {password:sha1(tmp.salt+tmp.password)})
		)",
		do_sign_off: "[
			checked_tbs_send({type:'lobby_quit', user:tmp.username, session_id:tmp.session_id}),
			set(tmp.username, ''),
			set(tmp.session_id, -1),
			set(tmp.salt, null),
			set(tmp.servers, null),
			set(tmp.lobby_users, []),
			set(tmp.game_selection, null),
			// XXX clear games/user/chat lists
			fire_event('redraw_interface'),
		]",
		send_heartbeat: "checked_tbs_send({
			type: 'lobby_heartbeat', 
			user: tmp.username, 
			session_id: tmp.session_id, 
		})",

		create_game_dialog: "[enable_frames(false), set(me.widgets.child, widget(me, {
			type: 'dialog',
			id: 'create_game_dlg',
			background_alpha: 255,			
			background_frame: 'empty_window',
			upscale_frame: false,
			rect: [0, 0, level_width, level_height],
			cursor: [20, 40],
			zorder: 2000,
			on_close: def(cancelled) [if(not cancelled, debug(q(1))), schedule(2,enable_frames(true)), set(me.widgets.create_game_dlg, null)],
			children: [{
				type: 'label',
				font: vars.font,
				color: vars.color,
				size: 72,
				align_h: 'center',
				xy: [level_width/2, 20],
				text: tmp.game_selection or 'NO GAME',
			}, {
				type: 'grid',
				columns: 1,
				column_widths: level_width,
				column_alignments: 'center',
				xy: [0, 120],
				children: [{
					type: 'selector', 
					id: 'sel', 
					list: map(tmp.servers, {type:'image', id:key, image:unencode(value.display_image)}), 
					on_change: ''
				}],
			}, {
				type: 'button', 
				id: 'cancel_button',
				padding: [25, 10],
				xy: [10, level_height-50],
				enabled: true,
				label: {
					type: 'label', 
					text: 'Cancel', 
					size: 16, 
					color: vars.color, 
					font: vars.font
				},
				on_click: '[schedule(2,enable_frames(true)), set(me.widgets.create_game_dlg, null)]',
			}, {
				type: 'button', 
				id: 'create_button',
				padding: [25, 10],
				align_h: 'right',
				xy: [level_width, level_height-50],
				enabled: true,
				label: {
					type: 'label', 
					text: 'Create', 
					size: 16, 
					color: vars.color, 
					font: vars.font
				},
				on_click: '[schedule(2,enable_frames(true)), set(me.widgets.create_game_dlg, null)]',
			}],		
		}))]",
		
		games_list_widget: "widget(me, {
			type: 'dialog', 
			rect: [0, 0, 2*level_width/3, level_height],
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			cursor: [10, 10],
			children: [{
				type: 'grid',
				columns: 2,
				horizontal_padding: 40,
				children: [{
					type: 'text_editor', 
					id: 'username_edit_box',
					font_size: 12, 
					color: vars.color,
					width: 200, 
					height: 30,
					text: USERNAME or '',
					on_change: 'set(tmp.username, text)'
				}, {
					type: 'button', 
					id: 'sign_on_button',
					padding: [25, 10],
					enabled: false,
					label: {
						type: 'label', 
						text: 'Sign On', 
						size: 16, 
						color: vars.color, 
						font: vars.font
					},
					on_click: 'if(tmp.signed_on, [
						do_sign_off,
						set(me.widgets.sign_on_button.disable, true),
					], [
						do_sign_on, 
						set(me.widgets.sign_on_button.disable, true),
					])'
				}],
			}, {
				type: 'button',
				id: 'create_game_button',
				padding: [25, 10],
				enabled: false,
				label: {
					type: 'label', 
					text: 'Create Game', 
					size: 16, 
					color: vars.color, 
					font: vars.font
				},
				on_click: 'create_game_dialog',
			}, {
				type: 'grid',
				id: 'games_list_grid',
				columns: 1,
				column_widths: 2*level_width/3,
				allow_selection: true,
				max_height: 2*level.height/3,
				wh: [2*level_width/3, 2*level.height/3],
				children: [
				],
			}, {
				type: 'label',
				size: 20,
				y: level_height - 40,
				x: 10,
				id: 'error_text',
				color: 'green',
				font: vars.font,
				text: 'Checking server...',
			}],
		})",
		
		user_widget: "def(username) widget(me, {
			type: 'grid',
			columns: 2,
			horizontal_padding: 20,
			children: [{
				type: 'image',
				image: 'silhouette.png',
				image_width: 16,
				image_height: 16,
			}, {
				type: 'label',
				font: vars.font,
				color: vars.color,
				size: 18,
				text: username,
			}],
		})",
		
		user_list_widget: "widget(me, {
			type: 'dialog', 
			id: 'user_list_dlg',
			rect: [2*level_width/3, 0, level_width/3, level_height/2],
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			cursor: [10, 10],
			children: [{
				type: 'grid',
				id: 'user_list_grid',
				columns: 1,
				column_widths: level_width/2,
				max_height: level_height/2,
				children: map(tmp.lobby_users, user_widget(value)),
			}],
		})",
		
		chat_box_widget: "widget(me, {
			type: 'dialog', 
			rect: [2*level_width/3, level_height/2, level_width/3, level_height/2],
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			cursor: [10, 10],
			children: [
			]
		})",
		
		draw_interface: "set_widgets(me, [games_list_widget, user_list_widget, chat_box_widget])",
    },
    
    on_create: "[
		console_output_to_screen(false),
		set(x, 0), set(y, 0),
        set(vars.client, tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT)),
		fire_event(me, 'redraw_interface'),
		fire_event(me, 'get_server_info'),
    ]",
	
	on_window_resize: "[
		set(level.dimensions, [0,0,new_width,new_height]),
		fire_event(me, 'redraw_interface'),
	] where new_width = max(width,800)-1
	  where new_height = max(height,600)-1
	",

	on_redraw_interface: "draw_interface",
	on_get_server_info: "get_server_info",
	on_execute_login: "do_sign_on",
	on_update_client_list: "if(me.widgets.user_list_dlg, set(me.widgets.user_list_dlg, user_list_widget), set(me.widgets.child, user_list_widget))",
	
	on_process: "if(vars.client, tbs_process(vars.client))",
    
    on_connection_error: "[
		if(not tmp.signed_on, set(me.widgets.sign_on_button.enable, true)),
		error_text(error),
	]",
    
	on_connection_success: "error_text(null)",
	
	on_message_received: "[debug(message.type/*, message*/),
		switch(message.type, 
			'lobby_heartbeat_reply', send_heartbeat,
			
			'lobby_server_info', [
				if(message.servers, [
					//create_games_selector(message.servers, game_key, SCREEN_WIDTH, SCREEN_HEIGHT),
					set(tmp.servers, message.servers),
					set(tmp.game_selection, game_key),
					info_text('Got game server information.'),
				] where game_key = keys(message.servers)[0]), 
				get_lobby_users
			],
			
			'lobby_users', [
				set(tmp.lobby_users, message.users), 
				set(me.widgets.sign_on_button.enable, true),
				info_text('Got lobby user list.'),
				fire_event('update_client_list'),
				send_heartbeat,
			],
			
			'lobby_password_request', [
				set(tmp.salt, message.salt),
				set(tmp.session_id, message.session_id),
				fire_event('execute_login')
			],
			
			'lobby_user_login', [
				if(message.user = tmp.username, [
					set(me.widgets.sign_on_button.enable, true),
					set(widgets.sign_on_button.label.text, 'Sign Off'),
					set(widgets.create_game_button.enable, true),
					set(tmp.signed_on, true), 
					info_text('Logged in okay'),
					get_lobby_users
				], send_heartbeat),
				if(not(message.user in tmp.lobby_users), add(tmp.lobby_users, [message.user])),
				fire_event('update_client_list'),				
			],
			
			'error', error_text(message.description),
			
			'lobby_user_quit', [
				if(message.user = tmp.username, [
					set(tmp.signed_on, false), 
					set(widgets.sign_on_button.label.text, 'Sign On'),
					set(me.widgets.sign_on_button.enable, true),
				], [
					set(tmp.lobby_users, filter(tmp.lobby_users, value != message.user)),
					fire_event('update_client_list'),
					send_heartbeat,
				])
			]
/*
			
			
			'game_created', [
				set(tmp.game_id, message.game_id),
				module_launch(tmp.game_selection, {
					game_id: message.game_id, 
					user: tmp.username, 
					session_id: tmp.session_id, 
					server_address: message.game_server_address, 
					server_port: message.game_server_port, 
					from_lobby: true} + tmp.games[game_selection]),
			],
			
			'lobby_request_to_join', do_request_to_join(message.user),
			
			'lobby_player_left_game', if(me.widgets.request_to_join_dlg, [set(me.widgets.request_to_join_dlg, null), enable_frames()]),
			
			'lobby_player_join_reply', [
				if(me.widgets.request_to_join_dlg, [set(me.widgets.request_to_join_dlg, null), enable_frames()]), 
				if(message.requesting_user = tmp.username, set(tmp.lobby_game_id, if(message.accept, message.game_id, -1)))
			],
*/
		)
    ]",

	on_end_anim: "animation('normal')",

	animation: {
		id: "normal",
		image: "cube.png",
		rect: [0,0,15,15],
		frames: 1,
		duration: 1000,
	},
	
	editor_info: {
		category: "controllers",
		var: [
			{
				name: "x_bound",
				type: "x",
				value: "x-100",
			},
			{
				name: "x2_bound",
				type: "x",
				value: "x+150",
			},
			{
				name: "y_bound",
				type: "y",
				value: "y-100",
			},
			{
				name: "y2_bound",
				type: "y",
				value: "y+150",
			},
		],
	},
}
