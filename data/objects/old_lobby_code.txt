tmp: {
		username: null,
		password: "Hello there",
		salt: null,
		session_id: -1,
		signed_on: false,
		game_selection: "",
		games: {},
		bots_added: 0,
		game_id: -1,
		lobby_users: {},
		lobby_game_id: -1,
		
		requesting_player: null,
}



        do_sign_on: "def(uname) if(vars.client, 
			[tbs_send(vars.client, {
				type: 'lobby_login', 
				user: uname, 
				session_id: tmp.session_id} + if(tmp.salt and tmp.password, {password:sha1(salt+tmp.password)})),
				error_text(null)], 
			error_text('No TBS client configured')
        )",

		enable_frames: "def(en=true) map(me.widgets.children, set(value.enable, en))",
		
		do_join_reply: "def(user, reply) if(vars.client, [
			tbs_send(vars.client, {
				type: 'lobby_join_reply', 
				user: tmp.username, 
				game_id: tmp.lobby_game_id,
				session_id: tmp.session_id, 
				accept: reply, 
				requesting_user:user}), error_text(null)],
			error_text('No TBS client configured')
		)",
		
		do_request_to_join: "def(user) [set(me.widgets.child, {
			type: 'dialog',
			id: 'request_to_join_dlg',
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			rect: [0.35*level_width, 0.2*level_height, 0.6*level_width, 0.3*level_height],
			zorder: 2000,
			on_close: def(cancelled) [do_join_reply(tmp.requesting_player, true), schedule(1,enable_frames(true)), set(me.widgets.request_to_join_dlg, null)],
			children: [{
				type: 'label', 
				text: 'Player ' + user + ' has requested to join. Allow?',
				color: vars.color,
				font: vars.font,
				size: 28,
				xy: [0.35*level_width, 10],
				align_h: 'middle',
			}, {
				type: 'button',
				rect: [0.2*level_width, 0.3*level_height - 75, 150, 40],
				label: {type: 'label', font:vars.font, size: 20, color:vars.color, text: 'Yes'},
				on_click: def() [
					schedule(1, enable_frames(true)), 
					set(me.widgets.request_to_join_dlg, null),
					do_join_reply(tmp.requesting_player, true),
					set(tmp.requesting_player, null),
				],
				align_h: 'middle',
			}, {
				type: 'button',
				rect: [0.55*level_width, 0.3*level_height - 75, 150, 40],
				label: {type: 'label', font:vars.font, size: 20, color:vars.color, text: 'No'},
				on_click: def() [
					schedule(1,enable_frames(true)), 
					set(me.widgets.request_to_join_dlg, null), 
					do_join_reply(tmp.requesting_player, false), 
					set(tmp.requesting_player, null)
				],
				align_h: 'middle',
			}],
		}), 
		enable_frames(false),
		set(tmp.requesting_player, user)
		]",
		
		send_password: "def(salt,pwd,sid) tbs_send(vars.client, {type:'lobby_login', user:tmp.username, password:sha1(salt+pwd), session_id:sid})",
		
		do_sign_off: "if(vars.client, 
			tbs_send(vars.client, {type:'lobby_quit', user:tmp.username, session_id:tmp.session_id}), 
			error_text('No TBS client configured')
		)",
		
		get_server_info: "def(sid) if(vars.client, tbs_send(vars.client, {type:'lobby_get_server_info', user:tmp.username, session_id:sid}), error_text('No TBS client configured'))",
		
		do_start_game: "[
			if(vars.client, 
				tbs_send(vars.client, {
					type: 'lobby_start_game', 
					user: tmp.username, 
					session_id: tmp.session_id, 
					game_id: tmp.lobby_game_id
				}), 
				error_text('No TBS client configured')
			)
		]",
		
		create_lobby_dialog: "def(ww, hh) set_widgets(me, {		
			type: 'dialog',
			id: 'dlg',
			background_frame: 'empty_window',
			rect: [0, 0, ww, hh],
			cursor: [35, 20],
			children: [{
				type: 'grid',
				columns: 2,
				horizontal_padding: 40,
				children: [{
					type: 'text_editor', 
					id: 'username_edit_box',
					font_size: 12, 
					width: 200, 
					height: 30,
					text: USERNAME or '',
					//on_change: 'set(tmp.username, me.widgets.username_edit_box.text)',
				}, {
					type: 'button', 
					id: 'sign_on_button',
					padding: [25, 10],
					label: {type: 'label', text: 'Sign On', size: 16, color: vars.color, font: vars.font},
					on_click: 'if(tmp.signed_on, [
							do_sign_off, 
							set(me.widgets.sign_on_button.disable, true),
						], [
							do_sign_on(me.widgets.username_edit_box.text), 
							set(me.widgets.sign_on_button.disable, true),
							set(tmp.username, me.widgets.username_edit_box.text)
						]
					)',
				}],
			}, {
				type: 'grid',
				id: 'user_list_grid',
				columns: 1,
				column_widths: ww/3,
				allow_selection: true,
				max_height: hh-150,
				wh:[ww/3, hh-150],
				show_background: true,
				children: [
				]
			}, {
				type: 'label',
				size: 28,
				id: 'error_text',
				color: 'red',
				font: vars.font,
				text: '',
			}],
		})",
		
		create_lobby_games_list: "def(users)
		",
		
		create_join_button: "def(game_id) widget(me, {
			type: 'button', 
			label:'Join', 
			on_click: def() join_game(game_id)
		})",
		
		change_selection: "def(sel) [
			set(tmp.bots_added, 0),
			set(tmp.game_selection, sel),
			set(me.widgets.minp.text, 'Minimum Players: ' + tmp.games.sel.min_players),
			set(me.widgets.minp.text, 'Minimum Humans: ' + tmp.games.sel.min_humans),
			set(me.widgets.minp.text, 'Maximum Players: ' + tmp.games.sel.max_players),
			set(me.widgets.minp.text, 'Bots supported: ' + tmp.games.sel.has_bots),
		]",
			
		build_games_selector: "def(games_map, game, ww, hh) {
			type: 'dialog',
			id: 'game_selector',
			zorder: 1000, 
			rect: [ww/2, 25, ww/2-25, hh-50],
			background_frame: 'empty_window',
			cursor: [20, 20],
			children: [
				{
					type: 'grid',
					columns: 1,
					column_widths: ww/2-65,
					column_alignments: 'center',
					children: [
						{type: 'selector', id: 'sel', list: map(games_map, {type:'image', id:key, image:unencode(value.display_image)}), on_change: 'change_selection(selection)'},
						{
							type: 'grid',
							columns: 1,
							column_widths: ww/2-65,
							column_alignments: 'center',
							children: [
								{type: 'label', id: 'minp' ,text: 'Minimum Players: ' + game.min_players, font: vars.font, size: 14, color: vars.color}, 
								{type: 'label', id: 'minh', text: 'Minimum Humans: ' + game.min_humans, font: vars.font, size: 14, color: vars.color}, 
								{type: 'label', id: 'maxp', text: 'Maximum Players: ' + game.max_players, font: vars.font, size: 14, color: vars.color}, 
								{type: 'label', id: 'hasbots', text: 'Bots supported: ' + game.has_bots, font: vars.font, size: 14, color: vars.color}, 
							],
						},
						{type: 'selector', id: 'bot_sel', list: map(range(game.max_players), {type: 'label', id: 'bots_'+str(value), text: str(value), font: vars.font, size: 12, color: vars.color}), on_change: 'debug(q(add bots))'},
						{
							type: 'grid',
							columns: 2,
							column_widths: (ww/2-65)/2,
							column_alignments: 'center',
							children: [{	
								type: 'button', 
								id: 'create_game', 
								label: {
									type: 'label', 
									text: 'Create Game', 
									font: vars.font, 
									size: 20, 
									color: vars.color
								}, 
								enabled: if(tmp.lobby_users[tmp.username].created_game = tmp.game_selection, false, true),
								on_click: '[create_lobby_game(tmp.game_selection), set(me.widgets.create_game.disable, true)]'
							}, {
								type: 'button', 
								id: 'start_game', 
								label: {
									type: 'label', 
									text: 'Start Game', 
									font: vars.font, 
									size: 20, 
									color: vars.color
								}, 
								on_click: def() [do_start_game, set(me.widgets.start_game.enable, false)]
							}],
						},
					],
				},
			],
		}",
		
		create_games_selector: "def(games_map, game_key, ww, hh) if(me.widgets.game_selector, 
			set(me.widgets.game_selector, build_games_selector(games_map, games_map[game_key], ww, hh)), 
			set(me.widgets.child, build_games_selector(games_map, games_map[game_key], ww, hh))
		)",
		
		get_lobby_status: "tbs_send(vars.client, {type:'lobby_get_status', user:tmp.username, session_id:tmp.session_id})",
		
		send_heartbeat: "if(vars.client, tbs_send(vars.client, {
			type: 'lobby_heartbeat', 
			user: tmp.username, 
			session_id: tmp.session_id, 
		}))",

		join_game: "def(game_id) if(vars.client, tbs_send(vars.client, {
			type: 'lobby_join_game', 
			user: tmp.username, 
			session_id: tmp.session_id, 
			game_id: game_id,
		}), error_text('No client configured'))",
		
		create_lobby_game: "def(game_type) 
			if(game_type and vars.client, [
				debug('Sending create game message.'),
				tbs_send(vars.client, {
					type: 'lobby_create_game', 
					user: tmp.username, 
					session_id: tmp.session_id, 
					game_type: game_type})],
				error_text('ERROR: game name is empty OR invalid client')
			)
		",
		
		
